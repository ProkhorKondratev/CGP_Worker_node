services:
  api:
    restart: unless-stopped
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cgp-api
    env_file:
      - .env
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    ports:
      - "${API_PORT}:8000"
    volumes:
      - worker_data:/app/data
      - odm_data:/app/odm_data
    depends_on:
      - postgres
      - redis
      - odm-engine

  postgres:
    restart: unless-stopped
    image: postgis/postgis:16-3.4-alpine
    container_name: cgp-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  redis:
    restart: unless-stopped
    image: redis
    container_name: cgp-redis
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  odm-engine:
    restart: unless-stopped
    image: opendronemap/nodeodm:gpu
    container_name: cgp-odm-node
    environment:
      - gpus=all
    ports:
      - "${ODM_NODE_PORT}:3000"
    volumes:
      - odm_data:/var/www/data
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              capabilities: [ gpu ]
              count: all
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/info" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  pg_data:
  redis_data:
  odm_data:
  worker_data:
